>pythonw -u "moosorting.py"
======================================================
Test initialized: example from
Fang et al (2008) An Efficient Non-dominated Sorting Method
for Evolutionary Algorithms, Evol. Comput. 16(3):355-384

Nodes: 8  Objectives: 3
dominance matrix
      1   2   3   4   5   6   7   8
  1   0   >   >   <   0   <   <   0
  2   <   0   0   <   0   <   <   0
  3   <   0   0   <   0   <   <   0
  4   >   >   >   0   0   0   0   0
  5   0   0   0   0   0   0   0   0
  6   >   >   >   0   0   0   <   0
  7   >   >   >   0   0   >   0   0
  8   0   0   0   0   0   0   0   0
------------------------------------------------


Computing nondominated_waves...
 ---------------------------------
 getDominanceTree([1, 2, 3, 4, 5, 6, 7, 8])
     ---------------------------------
     getDominanceTree([1, 2, 3, 4])
         ---------------------------------
         getDominanceTree([1, 2])
             ---------------------------------
             getDominanceTree([1])
             .single node return [1]
             ---------------------------------
             getDominanceTree([2])
             .single node return [2]
         @@  left tree [1]
         @@ right tree [2]
         --> top node list returned [1]
         --> dom dict {1: [2], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: []}
         ---------------------------------
         getDominanceTree([3, 4])
             ---------------------------------
             getDominanceTree([3])
             .single node return [3]
             ---------------------------------
             getDominanceTree([4])
             .single node return [4]
         @@  left tree [3]
         @@ right tree [4]
         --> top node list returned [4]
         --> dom dict {1: [2], 2: [], 3: [], 4: [3], 5: [], 6: [], 7: [], 8: []}
     @@  left tree [1]
     @@ right tree [4]
     --> top node list returned [4]
     --> dom dict {1: [2, 3], 2: [], 3: [], 4: [1], 5: [], 6: [], 7: [], 8: []}
     ---------------------------------
     getDominanceTree([5, 6, 7, 8])
         ---------------------------------
         getDominanceTree([5, 6])
             ---------------------------------
             getDominanceTree([5])
             .single node return [5]
             ---------------------------------
             getDominanceTree([6])
             .single node return [6]
         @@  left tree [5]
         @@ right tree [6]
         --> top node list returned [5, 6]
         --> dom dict {1: [2, 3], 2: [], 3: [], 4: [1], 5: [], 6: [], 7: [], 8: []}
         ---------------------------------
         getDominanceTree([7, 8])
             ---------------------------------
             getDominanceTree([7])
             .single node return [7]
             ---------------------------------
             getDominanceTree([8])
             .single node return [8]
         @@  left tree [7]
         @@ right tree [8]
         --> top node list returned [7, 8]
         --> dom dict {1: [2, 3], 2: [], 3: [], 4: [1], 5: [], 6: [], 7: [], 8: []}
     @@  left tree [5, 6]
     @@ right tree [7, 8]
     --> top node list returned [5, 7, 8]
     --> dom dict {1: [2, 3], 2: [], 3: [], 4: [1], 5: [], 6: [], 7: [6], 8: []}
 @@  left tree [4]
 @@ right tree [5, 7, 8]
 --> top node list returned [4, 5, 7, 8]
 --> dom dict {1: [2, 3], 2: [], 3: [], 4: [1], 5: [], 6: [], 7: [6], 8: []}

non-dominated FRONT : [4, 5, 7, 8]
CHILDREN : [1, 6]
 ---------------------------------
 getDominanceTree([1, 6])
     ---------------------------------
     getDominanceTree([1])
     .single node return [1]
     ---------------------------------
     getDominanceTree([6])
     .single node return [6]
 @@  left tree [1]
 @@ right tree [6]
 --> top node list returned [6]
 --> dom dict {1: [2, 3], 2: [], 3: [], 4: [], 5: [], 6: [1], 7: [6], 8: []}

non-dominated FRONT : [6]
CHILDREN : [1]
 ---------------------------------
 getDominanceTree([1])
 .single node return [1]

non-dominated FRONT : [1]
CHILDREN : [2, 3]
 ---------------------------------
 getDominanceTree([2, 3])
     ---------------------------------
     getDominanceTree([2])
     .single node return [2]
     ---------------------------------
     getDominanceTree([3])
     .single node return [3]
 @@  left tree [2]
 @@ right tree [3]
 --> top node list returned [2, 3]
 --> dom dict {1: [2, 3], 2: [], 3: [], 4: [], 5: [], 6: [1], 7: [6], 8: []}

non-dominated FRONT : [2, 3]
CHILDREN : []
done.

final DOMINANCE dict
1 > [2, 3]
2 > []
3 > []
4 > []
5 > []
6 > [1]
7 > [6]
8 > []

4 non-dominated fronts:
[4, 5, 7, 8]
[6]
[1]
[2, 3]
======================================================
Comparing to published results... PASSED

======================================================
Random objectives test initialized
Nodes: 15  Objectives: 2
objectives dict: 15 keys with 2 elements
dominance matrix
      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15
  1   0   >   0   0   0   >   0   0   >   >   >   0   0   0   0
  2   <   0   <   0   <   >   0   0   >   0   <   <   0   <   <
  3   0   >   0   0   <   >   0   0   >   0   0   0   0   <   0
  4   0   0   0   0   0   0   <   0   0   0   0   0   <   0   0
  5   0   >   >   0   0   >   0   0   >   0   0   0   0   <   0
  6   <   <   <   0   <   0   <   0   0   0   <   <   0   <   <
  7   0   0   0   >   0   >   0   >   0   0   0   0   0   0   0
  8   0   0   0   0   0   0   <   0   0   0   0   0   <   0   0
  9   <   <   <   0   <   0   0   0   0   <   <   <   0   <   <
 10   <   0   0   0   0   0   0   0   >   0   <   0   0   0   0
 11   <   >   0   0   0   >   0   0   >   >   0   0   0   0   0
 12   0   >   0   0   0   >   0   0   >   0   0   0   0   0   0
 13   0   0   0   >   0   0   0   >   0   0   0   0   0   0   0
 14   0   >   >   0   >   >   0   0   >   0   0   0   0   0   0
 15   0   >   0   0   0   >   0   0   >   0   0   0   0   0   0
----------------------------------------------------
 ---------------------------------
 getDominanceTree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
     ---------------------------------
     getDominanceTree([1, 2, 3, 4, 5, 6, 7])
         ---------------------------------
         getDominanceTree([1, 2, 3])
             ---------------------------------
             getDominanceTree([1])
             .single node return [1]
             ---------------------------------
             getDominanceTree([2, 3])
                 ---------------------------------
                 getDominanceTree([2])
                 .single node return [2]
                 ---------------------------------
                 getDominanceTree([3])
                 .single node return [3]
             @@  left tree [2]
             @@ right tree [3]
             --> top node list returned [3]
             --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: []}
         @@  left tree [1]
         @@ right tree [3]
         --> top node list returned [1, 3]
         --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: []}
         ---------------------------------
         getDominanceTree([4, 5, 6, 7])
             ---------------------------------
             getDominanceTree([4, 5])
                 ---------------------------------
                 getDominanceTree([4])
                 .single node return [4]
                 ---------------------------------
                 getDominanceTree([5])
                 .single node return [5]
             @@  left tree [4]
             @@ right tree [5]
             --> top node list returned [4, 5]
             --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: []}
             ---------------------------------
             getDominanceTree([6, 7])
                 ---------------------------------
                 getDominanceTree([6])
                 .single node return [6]
                 ---------------------------------
                 getDominanceTree([7])
                 .single node return [7]
             @@  left tree [6]
             @@ right tree [7]
             --> top node list returned [7]
             --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [], 6: [], 7: [6], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: []}
         @@  left tree [4, 5]
         @@ right tree [7]
         --> top node list returned [5, 7]
         --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [], 6: [], 7: [6, 4], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: []}
     @@  left tree [1, 3]
     @@ right tree [5, 7]
     --> top node list returned [1, 5, 7]
     --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: []}
     ---------------------------------
     getDominanceTree([8, 9, 10, 11, 12, 13, 14, 15])
         ---------------------------------
         getDominanceTree([8, 9, 10, 11])
             ---------------------------------
             getDominanceTree([8, 9])
                 ---------------------------------
                 getDominanceTree([8])
                 .single node return [8]
                 ---------------------------------
                 getDominanceTree([9])
                 .single node return [9]
             @@  left tree [8]
             @@ right tree [9]
             --> top node list returned [8, 9]
             --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: [], 15: []}
             ---------------------------------
             getDominanceTree([10, 11])
                 ---------------------------------
                 getDominanceTree([10])
                 .single node return [10]
                 ---------------------------------
                 getDominanceTree([11])
                 .single node return [11]
             @@  left tree [10]
             @@ right tree [11]
             --> top node list returned [11]
             --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [], 11: [10], 12: [], 13: [], 14: [], 15: []}
         @@  left tree [8, 9]
         @@ right tree [11]
         --> top node list returned [8, 11]
         --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [9], 11: [10], 12: [], 13: [], 14: [], 15: []}
         ---------------------------------
         getDominanceTree([12, 13, 14, 15])
             ---------------------------------
             getDominanceTree([12, 13])
                 ---------------------------------
                 getDominanceTree([12])
                 .single node return [12]
                 ---------------------------------
                 getDominanceTree([13])
                 .single node return [13]
             @@  left tree [12]
             @@ right tree [13]
             --> top node list returned [12, 13]
             --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [9], 11: [10], 12: [], 13: [], 14: [], 15: []}
             ---------------------------------
             getDominanceTree([14, 15])
                 ---------------------------------
                 getDominanceTree([14])
                 .single node return [14]
                 ---------------------------------
                 getDominanceTree([15])
                 .single node return [15]
             @@  left tree [14]
             @@ right tree [15]
             --> top node list returned [14, 15]
             --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [9], 11: [10], 12: [], 13: [], 14: [], 15: []}
         @@  left tree [12, 13]
         @@ right tree [14, 15]
         --> top node list returned [12, 13, 14, 15]
         --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [9], 11: [10], 12: [], 13: [], 14: [], 15: []}
     @@  left tree [8, 11]
     @@ right tree [12, 13, 14, 15]
     --> top node list returned [11, 12, 13, 14, 15]
     --> dom dict {1: [], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [9], 11: [10], 12: [], 13: [8], 14: [], 15: []}
 @@  left tree [1, 5, 7]
 @@ right tree [11, 12, 13, 14, 15]
 --> top node list returned [1, 7, 12, 13, 14, 15]
 --> dom dict {1: [11], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [6, 4], 8: [], 9: [], 10: [9], 11: [10], 12: [], 13: [8], 14: [5], 15: []}

non-dominated FRONT : [1, 7, 12, 13, 14, 15]
CHILDREN : [11, 6, 4, 8, 5]
 ---------------------------------
 getDominanceTree([11, 6, 4, 8, 5])
     ---------------------------------
     getDominanceTree([11, 6])
         ---------------------------------
         getDominanceTree([11])
         .single node return [11]
         ---------------------------------
         getDominanceTree([6])
         .single node return [6]
     @@  left tree [11]
     @@ right tree [6]
     --> top node list returned [11]
     --> dom dict {1: [11], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [4], 8: [], 9: [], 10: [9], 11: [10, 6], 12: [], 13: [8], 14: [5], 15: []}
     ---------------------------------
     getDominanceTree([4, 8, 5])
         ---------------------------------
         getDominanceTree([4])
         .single node return [4]
         ---------------------------------
         getDominanceTree([8, 5])
             ---------------------------------
             getDominanceTree([8])
             .single node return [8]
             ---------------------------------
             getDominanceTree([5])
             .single node return [5]
         @@  left tree [8]
         @@ right tree [5]
         --> top node list returned [8, 5]
         --> dom dict {1: [11], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [4], 8: [], 9: [], 10: [9], 11: [10, 6], 12: [], 13: [8], 14: [5], 15: []}
     @@  left tree [4]
     @@ right tree [8, 5]
     --> top node list returned [4, 8, 5]
     --> dom dict {1: [11], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [4], 8: [], 9: [], 10: [9], 11: [10, 6], 12: [], 13: [8], 14: [5], 15: []}
 @@  left tree [11]
 @@ right tree [4, 8, 5]
 --> top node list returned [11, 4, 8, 5]
 --> dom dict {1: [11], 2: [], 3: [2], 4: [], 5: [3], 6: [], 7: [4], 8: [], 9: [], 10: [9], 11: [10, 6], 12: [], 13: [8], 14: [5], 15: []}

non-dominated FRONT : [11, 4, 8, 5]
CHILDREN : [10, 6, 3]
 ---------------------------------
 getDominanceTree([10, 6, 3])
     ---------------------------------
     getDominanceTree([10])
     .single node return [10]
     ---------------------------------
     getDominanceTree([6, 3])
         ---------------------------------
         getDominanceTree([6])
         .single node return [6]
         ---------------------------------
         getDominanceTree([3])
         .single node return [3]
     @@  left tree [6]
     @@ right tree [3]
     --> top node list returned [3]
     --> dom dict {1: [11], 2: [6], 3: [2], 4: [], 5: [3], 6: [], 7: [4], 8: [], 9: [], 10: [9], 11: [10], 12: [], 13: [8], 14: [5], 15: []}
 @@  left tree [10]
 @@ right tree [3]
 --> top node list returned [10, 3]
 --> dom dict {1: [11], 2: [6], 3: [2], 4: [], 5: [3], 6: [], 7: [4], 8: [], 9: [], 10: [9], 11: [10], 12: [], 13: [8], 14: [5], 15: []}

non-dominated FRONT : [10, 3]
CHILDREN : [9, 2]
 ---------------------------------
 getDominanceTree([9, 2])
     ---------------------------------
     getDominanceTree([9])
     .single node return [9]
     ---------------------------------
     getDominanceTree([2])
     .single node return [2]
 @@  left tree [9]
 @@ right tree [2]
 --> top node list returned [2]
 --> dom dict {1: [11], 2: [6, 9], 3: [2], 4: [], 5: [3], 6: [], 7: [4], 8: [], 9: [], 10: [], 11: [10], 12: [], 13: [8], 14: [5], 15: []}

non-dominated FRONT : [2]
CHILDREN : [6, 9]
 ---------------------------------
 getDominanceTree([6, 9])
     ---------------------------------
     getDominanceTree([6])
     .single node return [6]
     ---------------------------------
     getDominanceTree([9])
     .single node return [9]
 @@  left tree [6]
 @@ right tree [9]
 --> top node list returned [6, 9]
 --> dom dict {1: [11], 2: [6, 9], 3: [2], 4: [], 5: [3], 6: [], 7: [4], 8: [], 9: [], 10: [], 11: [10], 12: [], 13: [8], 14: [5], 15: []}

non-dominated FRONT : [6, 9]
CHILDREN : []
final DOMINANCE dict
1 > [11]
2 > [6, 9]
3 > [2]
4 > []
5 > [3]
6 > []
7 > [4]
8 > []
9 > []
10 > []
11 > [10]
12 > []
13 > [8]
14 > [5]
15 > []

5 non-dominated fronts:
[1, 7, 12, 13, 14, 15]
[11, 4, 8, 5]
[10, 3]
[2]
[6, 9]
======================================================

Testing non-dominance between solutions in the same front... passed.
Testing dominance relationship between solutions in different fronts... passed.
======================================================
Random objectives test initialized
Nodes: 50  Objectives: 2
objectives dict: 50 keys with 2 elements
dominance matrix
      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50
  1   0   >   0   0   0   >   0   0   >   >   >   0   0   0   0   >   >   >   >   0   >   >   >   >   >   >   0   0   0   >   >   >   0   0   >   >   0   >   <   >   0   >   >   0   >   0   >   0   >   0
  2   <   0   <   0   <   >   0   0   >   0   <   <   0   <   <   <   >   <   >   0   >   0   0   0   0   <   0   <   <   >   >   0   0   <   >   <   <   >   <   0   0   0   <   0   0   <   >   <   >   0
  3   0   >   0   0   <   >   0   0   >   0   0   0   0   <   0   0   >   >   >   0   >   >   >   >   >   0   0   <   <   >   >   0   0   <   >   0   0   >   <   0   0   >   >   0   0   <   >   0   >   0
  4   0   0   0   0   0   0   <   0   0   0   0   0   <   0   0   0   0   0   0   0   0   0   0   >   >   0   >   0   0   >   0   0   0   0   0   0   0   >   0   0   0   0   0   0   0   0   >   0   >   0
  5   0   >   >   0   0   >   0   0   >   0   0   0   0   <   0   0   >   >   >   0   >   >   >   >   >   0   >   0   <   >   >   0   0   0   >   >   0   >   0   >   0   >   >   >   0   0   >   0   >   0
  6   <   <   <   0   <   0   <   0   0   0   <   <   0   <   <   <   0   <   >   0   0   0   <   0   0   <   0   <   <   >   >   0   <   <   0   <   <   >   <   0   <   0   <   0   0   <   >   <   >   0
  7   0   0   0   >   0   >   0   >   0   0   0   0   0   0   0   0   0   0   >   >   0   0   0   >   >   0   >   0   0   >   >   0   >   0   0   0   0   >   0   0   0   0   0   >   0   0   >   0   >   >
  8   0   0   0   0   0   0   <   0   0   0   0   0   <   0   0   0   0   0   0   <   0   0   0   0   >   0   >   0   0   >   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
  9   <   <   <   0   <   0   0   0   0   <   <   <   0   <   <   <   <   <   0   0   >   0   <   0   0   <   0   <   <   >   0   <   0   <   0   <   <   0   <   <   <   <   <   0   0   <   0   <   0   0
 10   <   0   0   0   0   0   0   0   >   0   <   0   0   0   0   0   0   0   0   0   >   >   0   0   0   0   0   <   <   >   0   0   0   <   >   0   0   0   <   0   <   0   0   0   >   <   0   0   0   0
 11   <   >   0   0   0   >   0   0   >   >   0   0   0   0   0   0   >   0   >   0   >   >   >   0   >   >   0   <   0   >   >   >   0   <   >   0   0   >   <   >   0   >   0   0   >   <   >   0   >   0
 12   0   >   0   0   0   >   0   0   >   0   0   0   0   0   0   >   >   >   >   0   >   >   >   >   >   0   0   <   <   >   >   >   0   <   >   >   0   >   <   >   0   >   >   0   >   <   >   0   >   0
 13   0   0   0   >   0   0   0   >   0   0   0   0   0   0   0   0   0   0   0   >   0   0   0   >   >   0   >   0   0   >   >   0   0   0   0   0   0   >   0   0   0   0   0   0   0   0   >   0   >   >
 14   0   >   >   0   >   >   0   0   >   0   0   0   0   0   0   >   >   >   >   0   >   >   >   >   >   0   >   0   0   >   >   >   >   0   >   >   >   >   0   >   0   >   >   >   >   0   >   0   >   0
 15   0   >   0   0   0   >   0   0   >   0   0   0   0   0   0   0   >   >   >   0   >   0   >   >   >   0   >   0   0   >   >   0   >   0   >   0   >   >   0   0   0   >   >   >   0   0   >   0   >   0
 16   <   >   0   0   0   >   0   0   >   0   0   <   0   <   0   0   >   >   >   0   >   >   >   0   >   0   0   <   <   >   >   0   0   <   >   >   0   >   <   >   0   >   >   0   0   <   >   0   >   0
 17   <   <   <   0   <   0   0   0   >   0   <   <   0   <   <   <   0   <   >   0   >   0   <   0   0   <   0   <   <   >   >   0   0   <   0   <   <   >   <   0   <   0   <   0   0   <   >   <   >   0
 18   <   >   <   0   <   >   0   0   >   0   0   <   0   <   <   <   >   0   >   0   >   0   >   0   >   0   0   <   <   >   >   0   0   <   >   <   <   >   <   0   0   >   0   0   0   <   >   0   >   0
 19   <   <   <   0   <   <   <   0   0   0   <   <   0   <   <   <   <   <   0   0   0   0   <   0   0   <   0   <   <   >   >   <   <   <   0   <   <   >   <   0   <   <   <   <   0   <   0   <   0   0
 20   0   0   0   0   0   0   <   >   0   0   0   0   <   0   0   0   0   0   0   0   0   0   0   >   >   0   >   0   0   >   0   0   0   0   0   0   0   >   0   0   0   0   0   0   0   0   0   0   0   >
 21   <   <   <   0   <   0   0   0   <   <   <   <   0   <   <   <   <   <   0   0   0   <   <   0   0   <   0   <   <   >   0   <   0   <   0   <   <   0   <   <   <   <   <   0   0   <   0   <   0   0
 22   <   0   <   0   <   0   0   0   0   <   <   <   0   <   0   <   0   0   0   0   >   0   0   0   0   <   0   <   <   >   0   <   0   <   >   <   0   0   <   <   <   0   0   0   0   <   0   0   0   0
 23   <   0   <   0   <   >   0   0   >   0   <   <   0   <   <   <   >   <   >   0   >   0   0   0   0   <   0   <   <   >   >   0   0   <   >   <   <   >   <   0   0   0   <   0   0   <   >   <   >   0
 24   <   0   <   <   <   0   <   0   0   0   0   <   <   <   <   0   0   0   0   <   0   0   0   0   >   0   0   <   <   >   0   0   <   <   0   0   <   0   <   0   0   0   0   <   0   <   0   <   0   0
 25   <   0   <   <   <   0   <   <   0   0   <   <   <   <   <   <   0   <   0   <   0   0   0   <   0   0   <   <   <   >   0   0   <   <   0   <   <   0   <   0   0   0   <   <   0   <   0   <   0   <
 26   <   >   0   0   0   >   0   0   >   0   <   0   0   0   0   0   >   0   >   0   >   >   >   0   0   0   0   <   <   >   >   >   0   <   >   0   0   >   <   >   0   >   0   0   >   <   >   0   >   0
 27   0   0   0   <   <   0   <   <   0   0   0   0   <   <   <   0   0   0   0   <   0   0   0   0   >   0   0   0   <   >   0   0   <   <   0   0   <   0   0   0   0   0   0   <   0   <   0   <   0   0
 28   0   >   >   0   0   >   0   0   >   >   >   >   0   0   0   >   >   >   >   0   >   >   >   >   >   >   0   0   0   >   >   >   0   0   >   >   0   >   <   >   0   >   >   0   >   0   >   0   >   0
 29   0   >   >   0   >   >   0   0   >   >   0   >   0   0   0   >   >   >   >   0   >   >   >   >   >   >   >   0   0   >   >   >   >   0   >   >   >   >   0   >   0   >   >   >   >   0   >   0   >   0
 30   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   0   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <   <
 31   <   <   <   0   <   <   <   0   0   0   <   <   <   <   <   <   <   <   <   0   0   0   <   0   0   <   0   <   <   >   0   <   <   <   0   <   <   >   <   <   <   <   <   <   0   <   0   <   0   0
 32   <   0   0   0   0   0   0   0   >   0   <   <   0   <   0   0   0   0   >   0   >   >   0   0   0   <   0   <   <   >   >   0   0   <   >   0   0   >   <   >   <   0   0   0   0   <   0   0   0   0
 33   0   0   0   0   0   >   <   0   0   0   0   0   0   <   <   0   0   0   >   0   0   0   0   >   >   0   >   0   <   >   >   0   0   0   0   0   <   >   0   0   0   0   0   >   0   0   >   <   >   0
 34   0   >   >   0   0   >   0   0   >   >   >   >   0   0   0   >   >   >   >   0   >   >   >   >   >   >   >   0   0   >   >   >   0   0   >   >   0   >   0   >   0   >   >   0   >   <   >   0   >   0
 35   <   <   <   0   <   0   0   0   0   <   <   <   0   <   <   <   0   <   0   0   0   <   <   0   0   <   0   <   <   >   0   <   0   <   0   <   <   0   <   <   <   <   <   0   <   <   0   <   0   0
 36   <   >   0   0   <   >   0   0   >   0   0   <   0   <   0   <   >   >   >   0   >   >   >   0   >   0   0   <   <   >   >   0   0   <   >   0   0   >   <   0   0   >   0   0   0   <   >   0   >   0
 37   0   >   0   0   0   >   0   0   >   0   0   0   0   <   <   0   >   >   >   0   >   0   >   >   >   0   >   0   <   >   >   0   >   0   >   0   0   >   0   0   0   >   >   >   0   0   >   0   >   0
 38   <   <   <   <   <   <   <   0   0   0   <   <   <   <   <   <   <   <   <   <   0   0   <   0   0   <   0   <   <   >   <   <   <   <   0   <   <   0   <   <   <   <   <   <   0   <   <   <   <   0
 39   >   >   >   0   0   >   0   0   >   >   >   >   0   0   0   >   >   >   >   0   >   >   >   >   >   >   0   >   0   >   >   >   0   0   >   >   0   >   0   >   >   >   >   0   >   0   >   0   >   0
 40   <   0   0   0   <   0   0   0   >   0   <   <   0   <   0   <   0   0   0   0   >   >   0   0   0   <   0   <   <   >   >   <   0   <   >   0   0   >   <   0   <   0   0   0   0   <   0   0   0   0
 41   0   0   0   0   0   >   0   0   >   >   0   0   0   0   0   0   >   0   >   0   >   >   0   0   0   0   0   0   0   >   >   >   0   0   >   0   0   >   <   >   0   >   0   0   >   0   >   0   >   0
 42   <   0   <   0   <   0   0   0   >   0   <   <   0   <   <   <   0   <   >   0   >   0   0   0   0   <   0   <   <   >   >   0   0   <   >   <   <   >   <   0   <   0   0   0   0   <   >   0   0   0
 43   <   >   <   0   <   >   0   0   >   0   0   <   0   <   <   <   >   0   >   0   >   0   >   0   >   0   0   <   <   >   >   0   0   <   >   0   <   >   <   0   0   0   0   0   0   <   >   0   >   0
 44   0   0   0   0   <   0   <   0   0   0   0   0   0   <   <   0   0   0   >   0   0   0   0   >   >   0   >   0   <   >   >   0   <   0   0   0   <   >   0   0   0   0   0   0   0   <   >   <   >   0
 45   <   0   0   0   0   0   0   0   0   <   <   <   0   <   0   0   0   0   0   0   0   0   0   0   0   <   0   <   <   >   0   0   0   <   >   0   0   0   <   0   <   0   0   0   0   <   0   0   0   0
 46   0   >   >   0   0   >   0   0   >   >   >   >   0   0   0   >   >   >   >   0   >   >   >   >   >   >   >   0   0   >   >   >   0   >   >   >   0   >   0   >   0   >   >   >   >   0   >   0   >   0
 47   <   <   <   <   <   <   <   0   0   0   <   <   <   <   <   <   <   <   0   0   0   0   <   0   0   <   0   <   <   >   0   0   <   <   0   <   <   >   <   0   <   <   <   <   0   <   0   <   0   0
 48   0   >   0   0   0   >   0   0   >   0   0   0   0   0   0   0   >   0   >   0   >   0   >   >   >   0   >   0   0   >   >   0   >   0   >   0   0   >   0   0   0   0   0   >   0   0   >   0   >   0
 49   <   <   <   <   <   <   <   0   0   0   <   <   <   <   <   <   <   <   0   0   0   0   <   0   0   <   0   <   <   >   0   0   <   <   0   <   <   >   <   0   <   0   <   <   0   <   0   <   0   0
 50   0   0   0   0   0   0   <   0   0   0   0   0   <   0   0   0   0   0   0   <   0   0   0   0   >   0   0   0   0   >   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
----------------------------------------------------
final DOMINANCE dict
1 > [11]
2 > [6]
3 > []
4 > []
5 > [3]
6 > [47, 49]
7 > [4]
8 > []
9 > [21]
10 > [45]
11 > [10, 26]
12 > [16]
13 > [20]
14 > [5]
15 > []
16 > [43, 36]
17 > [19, 9]
18 > [23, 42, 25, 2]
19 > [31]
20 > [8, 50]
21 > []
22 > []
23 > [17, 35]
24 > []
25 > []
26 > [32]
27 > []
28 > [12]
29 > [37]
30 > []
31 > [38]
32 > [40]
33 > [44]
34 > []
35 > []
36 > [18]
37 > [33]
38 > [30]
39 > [41, 28, 1]
40 > [22]
41 > []
42 > []
43 > []
44 > [27, 24]
45 > []
46 > [34]
47 > []
48 > []
49 > []
50 > []

12 non-dominated fronts:
[7, 13, 14, 15, 29, 39, 46, 48]
[4, 20, 5, 37, 41, 28, 1, 34]
[8, 50, 3, 33, 12, 11]
[44, 16, 10, 26]
[27, 24, 43, 36, 45, 32]
[18, 40]
[23, 42, 25, 2, 22]
[17, 35, 6]
[19, 9, 47, 49]
[31, 21]
[38]
[30]
======================================================

Testing non-dominance between solutions in the same front... passed.
Testing dominance relationship between solutions in different fronts... passed.
>Exit code: 0
